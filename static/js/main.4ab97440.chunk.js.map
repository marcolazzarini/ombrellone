{"version":3,"sources":["firebase.js","components/UserCard/styles.js","theme.js","components/UserCard/UserCard.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ref","UserCard","styled","div","Input","input","User","Avatar","props","string","useState","expenseValue","setExpenseValue","id","img","value","max","dataRef","database","child","src","process","width","charAt","toUpperCase","slice","style","height","minValue","maxValue","text","type","onChange","event","target","onClick","set","App","users","setUsers","data","setData","useEffect","on","snapshot","val","usersWithData","map","user","userData","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0QAaAA,gBAXe,CACXC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKJR,mBAAoBS,M,wvBCZ5B,IAAMC,EAAWC,IAAOC,IAAV,KASRC,EAAQF,IAAOG,MAAV,ICRC,WDqBNC,EAAOJ,IAAOC,IAAV,KAKJI,EAASL,IAAOC,IAAV,KEIJF,EA1BE,SAAAO,GAAU,IADRC,EACO,EACkBC,mBAAS,GAD3B,mBACfC,EADe,KACDC,EADC,KAETC,GAAmBL,EAAxBM,IAAwBN,EAAnBK,IAAIE,EAAeP,EAAfO,MAAOC,EAAQR,EAARQ,IAElBC,EAAUC,EAASC,MAAM,gBAAgBA,MAAMN,GAOrD,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,yBAAKO,IAAKC,sBAAsCR,EAAK,OAAQS,MAAO,MAExE,kBAAC,EAAD,MAjBOb,EAiBmBI,GAjBFU,OAAO,GAAGC,cAAgBf,EAAOgB,MAAM,IAkB/D,yBAAKC,MAAO,CAAEJ,MAAO,GAAIK,OAAQ,KAC7B,kBAAC,IAAD,CAAqBZ,MAAOA,EAAOa,SAAU,EAAGC,SAAUb,EAAKc,KAAI,iBAAOf,MAE9E,kBAAC,EAAD,CAAcgB,KAAK,SAAShB,MAAOJ,EAAcqB,SAAU,SAAAC,GAAK,OAAIrB,EAAgBqB,EAAMC,OAAOnB,UACjG,4BAAQgB,KAAK,SAASI,QAfhB,WACVlB,EAAQmB,IAAIrB,EAAMJ,GAClBC,EAAgB,KAaZ,WCIGyB,EA1BH,WAAO,IAAD,EACY3B,mBAAS,MADrB,mBACP4B,EADO,KACAC,EADA,OAEU7B,mBAAS,MAFnB,mBAEP8B,EAFO,KAEDC,EAFC,KAed,GAXAC,qBAAU,WACNxB,EAASC,MAAM,SAASwB,GAAG,SAAS,SAAAC,GAChCL,EAASK,EAASC,UAGtB3B,EAASC,MAAM,gBAAgBwB,GAAG,SAAS,SAAAC,GACvCH,EAAQG,EAASC,YAEtB,KAGEP,IAAUE,EAAM,OAAO,8BAE5B,IAAMM,EAAgBR,EAAMS,KAAI,SAAAC,GAAI,kCAAUA,GAAV,IAAgBjC,MAAOyB,EAAKQ,EAAKnC,SACrE,OACI,6BACMiC,EAAcC,KAAI,SAACE,EAAUC,GAAX,OAAqB,kBAAC,EAAD,eAAUC,IAAKD,GAAYD,SCf5DG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4ab97440.chunk.js","sourcesContent":["import * as firebase from 'firebase';\n\nconst config = {\n    apiKey: \"AIzaSyCTRKL-BTfB4pSiZJh--9oStesMTySrpEg\",\n    authDomain: \"ombrellone-1f2f0.firebaseapp.com\",\n    databaseURL: \"https://ombrellone-1f2f0.firebaseio.com\",\n    projectId: \"ombrellone-1f2f0\",\n    storageBucket: \"ombrellone-1f2f0.appspot.com\",\n    messagingSenderId: \"428776112192\",\n    appId: \"1:428776112192:web:b3b3f53757f22a87d7dfa5\",\n    measurementId: \"G-LTMFQSMZFK\"\n};\n\nfirebase.initializeApp(config);\n\nexport default firebase.database().ref();","import styled from 'styled-components';\nimport theme from '../../theme'\n\nexport const UserCard = styled.div`\n  appearance: none;\n  display: flex;\n  align-items: center;\n  padding: 16px;\n  width: 100%;\n  font-size: 14px;\n`;\n\nexport const Input = styled.input`\n  border: none;\n  width: 40px;\n  padding: 8px;\n  font-size: 14px;\n  transition: box-shadow ease-out .25s;\n  &:focus, &:active {\n    border: none;\n    outline: none;\n    box-shadow: 0 0 0 2px ${theme.colors.primary01};\n  }\n`;\n\nexport const User = styled.div`\n  font-size: 14px;\n  font-weight: 600;\n`;\n\nexport const Avatar = styled.div`\n  width: 56px;\n  height: 56px;\n  border-radius: 28px;\n  overflow: hidden;\n`;","export default {\n    colors: {\n        fontColor: '#fff',\n        background: '#141414',\n        primary01: '#265FFF',\n        primary02: '#0D42D8',\n    }\n}","import React, { useState } from 'react'\nimport { CircularProgressbar } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport * as Styles from './styles'\nimport database from '../../firebase'\n\n\nconst capitalize = string => string.charAt(0).toUpperCase() + string.slice(1);\nconst UserCard = props => {\n    const [expenseValue, setExpenseValue] = useState(0);\n    const { img, id, value, max } = props;\n\n    const dataRef = database.child('consumazioni').child(id)\n\n    const apply = () => {\n        dataRef.set(value-expenseValue);\n        setExpenseValue(0);\n    };\n\n    return (\n        <Styles.UserCard>\n            <Styles.Avatar>\n                <img src={process.env.PUBLIC_URL + '/images/' + id + '.png'} width={56}/>\n            </Styles.Avatar>\n            <Styles.User>{ capitalize(id) }</Styles.User>\n            <div style={{ width: 64, height: 64 }}>\n                <CircularProgressbar value={value} minValue={0} maxValue={max} text={`â‚¬ ${value}`} />\n            </div>\n            <Styles.Input type=\"number\" value={expenseValue} onChange={event => setExpenseValue(event.target.value)} />\n            <button type=\"button\" onClick={apply}>Apply</button>\n        </Styles.UserCard>\n    )\n};\n\nexport default UserCard;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport database from './firebase'\nimport UserCard from './components/UserCard/UserCard'\n\n\n\nconst App = () => {\n    const [users, setUsers] = useState(null);\n    const [data, setData] = useState(null);\n\n    useEffect(() => {\n        database.child('users').on('value', snapshot => {\n            setUsers(snapshot.val());\n        });\n\n        database.child('consumazioni').on('value', snapshot => {\n            setData(snapshot.val());\n        });\n    }, []);\n\n\n    if (!users || !data) return <div />;\n\n    const usersWithData = users.map(user => ({ ...user, value: data[user.id] }))\n    return (\n        <div>\n            { usersWithData.map((userData, index) => <UserCard key={index} { ...userData} />) }\n        </div>\n    )\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}